package main

import (
	"log"
	"os"
    "context"
    "errors"
    "go.uber.org/zap"
    "go.uber.org/zap/zapcore"

	"{{ .ModuleName }}/api"
	oapiCodegenMiddleware "github.com/deepmap/oapi-codegen/pkg/middleware"
	"github.com/heptiolabs/healthcheck"
	"github.com/labstack/echo-contrib/prometheus"
	"github.com/labstack/echo/v4"
	echoMiddleware "github.com/labstack/echo/v4/middleware"
)

func main() {
    l, sync := newLogger()
    defer sync()
	swagger, err := api.GetSwagger()
	if err != nil {
		log.Fatalln("error loading swagger spec: ", err.Error())
	}

	service := api.New{{ .ServiceName | ToCamel }}()
	if err != nil {
		log.Fatalln("error creating service", err.Error())
	}
	e := echo.New()
	healthProbes(e)
	setupMetrics(e)
	e.Use(echoMiddleware.Recover())

	// If the apiRouter is not created, then the OpenAPI request validator will
	// block any requests which are not mentioned in the spec.
	apiRouter := e.Group("")
	apiRouter.Use(
	    oapiCodegenMiddleware.OapiRequestValidator(swagger),
	    newLoggerMiddleware(l.Desugar()),
	)

	api.RegisterHandlers(apiRouter, service)
	startServer(e)
}

func startServer(e *echo.Echo) {
	e.HideBanner = true
	go func() {
		if err := e.Start(":8080"); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatal("shutting down the server")
		}
	}()
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, os.Interrupt)
	<-quit
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}
}

// setupMetrics starts a metrics server on :9090
func setupMetrics(e *echo.Echo) {
	prom := prometheus.NewPrometheus("", nil)
	e.Use(prom.HandlerFunc)
	metricServer := echo.New()
	metricServer.HidePort = true
	metricServer.HideBanner = true
	prom.SetMetricsPath(metricServer)

	go func() {
		e.Logger.Fatal(metricServer.Start(":9090"))
	}()
}

func healthProbes(e *echo.Echo) {
	health := healthcheck.NewHandler()
	health.AddReadinessCheck("todo", func() error {
		return nil
	})

	e.GET("/ready", func(c echo.Context) error {
		health.ReadyEndpoint(c.Response().Writer, c.Request())
		return nil
	})
	e.GET("/live", func(c echo.Context) error {
		health.LiveEndpoint(c.Response().Writer, c.Request())
		return nil
	})
}

func newLogger() (*zap.SugaredLogger, func()) {
	cfg := zap.NewProductionConfig()
	cfg.EncoderConfig.CallerKey = zapcore.OmitKey
	cfg.EncoderConfig.EncodeTime = zapcore.RFC3339TimeEncoder
	l, err := cfg.Build()
	if err != nil {
		log.Fatalln("failed creating logger: ", err.Error())
	}

	return l.Sugar(), func() {
		err = l.Sync()
		if err != nil {
			log.Fatalln(err)
		}
	}
}

func newLoggerMiddleware(l *zap.Logger) echo.MiddlewareFunc {
	addErrorIfNotNil := func(err error) (zap.Field, bool) {
		if err != nil {
			var echoErr *echo.HTTPError
			if errors.As(err, &echoErr) {
				return zap.String("error", echoErr.Message.(string)), true
			}
			return zap.String("error", err.Error()), true
		}
		return zap.Field{}, false
	}
	addErrorIfNotNil(nil)
	return echoMiddleware.RequestLoggerWithConfig(echoMiddleware.RequestLoggerConfig{
		LogMethod:    true,
		LogRoutePath: true,
		LogStatus:    true,
		LogLatency:   true,
		LogError:     true,
		LogValuesFunc: func(c echo.Context, v echoMiddleware.RequestLoggerValues) error {
			fields := []zap.Field{
				zap.String("method", v.Method),
				zap.String("path", v.RoutePath),
				zap.Int("status", v.Status),
				zap.String("latency", v.Latency.String()),
			}
			if f, ok := addErrorIfNotNil(v.Error); ok {
				fields = append(fields, f)
			}
			l.Info("request", fields...)
			return nil
		},
	})
}

func mustGetEnv(s string) string {
	v := os.Getenv(s)
	if v == "" {
		log.Fatalf("environment variable %s is required", s)
	}
	return v
}
